//
// APICapabilities.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct APICapabilities: Codable, Hashable {

    public var version: APICapabilitiesVersion?
    public var area: APICapabilitiesArea?
    public var noteArea: APICapabilitiesNoteArea?
    public var tracepoints: APICapabilitiesTracepoints?
    public var waynodes: APICapabilitiesWaynodes?
    public var changesets: APICapabilitiesChangesets?
    public var timeout: APICapabilitiesTimeout?
    public var status: APICapabilitiesStatus?

    public init(version: APICapabilitiesVersion? = nil, area: APICapabilitiesArea? = nil, noteArea: APICapabilitiesNoteArea? = nil, tracepoints: APICapabilitiesTracepoints? = nil, waynodes: APICapabilitiesWaynodes? = nil, changesets: APICapabilitiesChangesets? = nil, timeout: APICapabilitiesTimeout? = nil, status: APICapabilitiesStatus? = nil) {
        self.version = version
        self.area = area
        self.noteArea = noteArea
        self.tracepoints = tracepoints
        self.waynodes = waynodes
        self.changesets = changesets
        self.timeout = timeout
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case area
        case noteArea = "note_area"
        case tracepoints
        case waynodes
        case changesets
        case timeout
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(area, forKey: .area)
        try container.encodeIfPresent(noteArea, forKey: .noteArea)
        try container.encodeIfPresent(tracepoints, forKey: .tracepoints)
        try container.encodeIfPresent(waynodes, forKey: .waynodes)
        try container.encodeIfPresent(changesets, forKey: .changesets)
        try container.encodeIfPresent(timeout, forKey: .timeout)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

